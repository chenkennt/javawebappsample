import groovy.json.JsonSlurper

def parseJsonFromOutput(cmd, def callback) {
  def json = sh script: cmd, returnStdout: true
  return callback(new JsonSlurper().parseText(json))
}

node {
  stage('init') {
    // git clone
    checkout scm
  }
  
  stage('build') {
    // maven build
    sh 'mvn clean package'
  }

  stage('deploy') {
    def acrGroup = 'kenchenacrtest'
    def acrName = 'kenchenacrtest'
    def acsGroup = 'kenchenacskube1'
    def acsName = 'kenchenacskube1'
    def imageName = 'calculator'
    def azureCred = 'vs_china_jenkins'
    def acsCred = 'kenchenacskube1'
    withCredentials([azureServicePrincipal(azureCred)]) {
      // login to Azure
      sh '''
        az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID
        az account set -s $AZURE_SUBSCRIPTION_ID
      '''

      // docker build
      // generate version, it's important to remove the trailing new line in git describe output
      def version = sh script: 'git describe | tr -d "\n"', returnStdout: true
      // get login server
      def loginServer = parseJsonFromOutput("az acr show -g $acrGroup -n $acrName", { o -> o.loginServer })
      // login docker
      // docker.withRegistry only supports credential ID, so use native docker command to login
      // you can also use docker.withRegistry if you add a credential
      sh "docker login -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET $loginServer"
      // build image
      def imageWithTag = "$loginServer/$imageName:$version"
      def image = docker.build imageWithTag
      // push image
      image.push()
      // logout docker
      sh "docker logout $loginServer"

      // get kubernetes config
      def serverAndUser = parseJsonFromOutput("az acs show -g $acsGroup -n $acsName", { o -> [server: o.masterProfile.fqdn, user: o.linuxProfile.adminUsername] })
      sshagent([acsCred]) {
        sh "scp -o StrictHostKeyChecking=no $serverAndUser.user@$serverAndUser.server:.kube/config kubeconfig"
      }
      // create secret
      sh "kubectl create secret docker-registry $acrName --docker-server=$loginServer --docker-username=$AZURE_CLIENT_ID --docker-password=$AZURE_CLIENT_SECRET --docker-email=$AZURE_CLIENT_ID --kubeconfig=kubeconfig"
      // update deployment.yaml with image tag and secret name
      def escaped = imageWithTag.replace('/', '\\/')
      sh "sed 's/\$IMAGE_TAG/$escaped/g' deployment.yaml | sed 's/\$KUBERNETES_SECRET_NAME/$acrName/g' > target/deployment.yaml"
      // deploy to kubernetes
      sh '''
        kubectl apply -f service.yaml --kubeconfig=kubeconfig
        kubectl apply -f target/deployment.yaml --kubeconfig=kubeconfig
      '''
      // update deployment
      sh 'rm kubeconfig'

      // logout from Azure
      sh 'az logout'
    }
  }
}
